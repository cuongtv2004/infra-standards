######################## On Centos ##########################

# Enable additional software repositories
# Add Epel Repository
rpm --import https://fedoraproject.org/static/0608B895.txt
rpm -ivh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm

# Add Remi Repository
rpm --import http://rpms.famillecollet.com/RPM-GPG-KEY-remi
rpm -ivh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm

# Enabling both Epel and Remi repositories
# Epel repository file is at  
vim /etc/yum.repos.d/epel.repo

# Then make sure that enabled has a value of 1 (1 enables, 0 disables)

# Remi repository file is at
vim /etc/yum.repos.d/remi.repo

####################### End enable repo on CentOS ######################

# Installing Nginx Web Server
yum install nginx
#on Ubuntu
apt-get install nginx

# Installing & Securing MySQL Database Server
yum install mysql mysql-server
# on ubuntu
apt-get install mysql mysql-server

# Next, run the commands below to configure and secure MySQL database server.
mysql_secure_installation

# Restart mysql
service mysqld start

# Installing PHP5 and other tools.
yum install php php-fpm php-cli php-mysql php-gd php-imap php-ldap php-odbc php-pear php-xml php-xmlrpc php-magickwand php-mbstring php-mcrypt php-mssql php-shout php-snmp php-soap php-tidy
# on ubuntu
apt-get install php php-fpm php-cli php-mysql php-gd php-imap php-ldap php-odbc php-pear php-xml php-xmlrpc php-magickwand php-mbstring php-mcrypt php-mssql php-shout php-snmp php-soap php-tidy

# Always startup servers and services
chkconfig --level 235 nginx on
chkconfig --level 235 mysqld on
chkconfig --level 235 php-fpm on

# Create the WordPress Database and User
# Go ahead and log into the MySQL Shell:
mysql -u root -p

# First, let's make the database (change 'wordpress' = database_name)
mysql> CREATE DATABASE wordpress;
Query OK, 1 row affected (0.00 sec)

# Then we need to create the new user (change 'wordpressuser' = username)
mysql> CREATE USER wordpressuser@localhost;
Query OK, 0 rows affected (0.00 sec)

# Set the password for your new user: (change 'password' = your password)
mysql> SET PASSWORD FOR wordpressuser@localhost= PASSWORD("password");
Query OK, 0 rows affected (0.00 sec)

# Finish up by granting all privileges to the new user.
mysql> GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost IDENTIFIED BY 'password';
Query OK, 0 rows affected (0.00 sec)

# Then refresh MySQL:
mysql> FLUSH PRIVILEGES;
Query OK, 0 rows affected (0.00 sec)

# Exit out of the MySQL shell:
mysql> exit

# Download WordPress
cd /opt
wget http://wordpress.org/latest.tar.gz
tar -xzvf latest.tar.gz 

# Setup the WordPress Configuration
cp ./wordpress/wp-config-sample.php ./wordpress/wp-config.php

# open the wordpress config:
sudo vi ./wordpress/wp-config.php

# Find the section that contains the field below and substitute in the correct name for your database, username, and password:
// ** MySQL settings - You can get this info from your web host ** //
/** The name of the database for WordPress */
define('DB_NAME', 'wordpress');

/** MySQL database username */
define('DB_USER', 'wordpressuser');

/** MySQL database password */
define('DB_PASSWORD', 'password');

# Copy the Files
sudo mkdir -p /var/www/wordpress
sudo cp -r ./wordpress/* /var/www/wordpress

# Give ownership of the directory to the nginx user, replacing the "username" with the name of your server user.
cd /var/www/
sudo chown nginx:nginx * -R
sudo usermod -a -G nginx username

# Set Up Nginx Server Blocks
sudo vim /etc/nginx/conf.d/default.conf

################# file config  ##################

#
# The default server
#
server {
    listen       80;
    server_name  _;

    #charset koi8-r;

    #access_log  logs/host.access.log  main;

    location / {
        root   /var/www/wordpress;
        index index.php  index.html index.htm;
    }

    error_page  404              /404.html;
    location = /404.html {
        root   /usr/share/nginx/html;
    }

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    location ~ \.php$ {
        root           /var/www/wordpress;
        fastcgi_pass   127.0.0.1:9000;
        fastcgi_index  index.php;
        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
        include        fastcgi_params;
    }

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}

###################### End config file ########################

# Restart nginx
sudo service nginx restart

# Change PHP.INI file
vim /etc/php.ini

cgi.fix_pathinfo=0

# Restart php fpm
service php-fpm restart


